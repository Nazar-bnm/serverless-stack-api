endpoints:
- https://my-id.execute-api.my-zone.amazonaws.com/prod/hello
- https://my-id.execute-api.my-zone.amazonaws.com/prod/notes

*** RUN UNIT TESTS ***
  $ serverless invoke local --function create --path mocks/create-event.json
  * if you have multiple profiles for your AWS SDK credentials, you will need to explicitly pick one. Use the following command instead:
  $ AWS_PROFILE=myProfile serverless invoke local --function create --path mocks/create-event.json
  * Where myProfile is the name of the AWS profile you want to use.
    If you need more info on how to work with AWS profiles in Serverless, refer to our Configure multiple AWS profiles chapter.

  serverless invoke local --function get --path mocks/get-event.json

  serverless invoke local --function list --path mocks/list-event.json

  serverless invoke local --function update --path mocks/update-event.json

  serverless invoke local --function delete --path mocks/delete-event.json

*** DEPLOY API ***
$ serverless deploy

or 

$ serverless deploy --aws-profile myProfile

Configure Multiple AWS Profiles - https://serverless-stack.com/chapters/configure-multiple-aws-profiles.html
---------
check API data -> $ aws apigateway get-rest-apis

deploy single function
$ serverless deploy function -f list

----

*** USER POOL ***
https://serverless-stack.com/chapters/create-a-cognito-user-pool.html

notes-user-pool

This is telling Serverless Framework that our APIs are secured using an Identity Pool. Here is how it roughly works:

1) A request with some signed authentication headers will be sent to our API.
2) AWS will use the headers to figure out which Identity Pool is tied to it.
3) The Identity Pool will ensure that the request is signed by somebody that has authenticated with our User Pool.
4) If so, then itâ€™ll assign the Auth IAM Role to this request.
5) Finally, IAM will check to ensure that this role has access to our API.
